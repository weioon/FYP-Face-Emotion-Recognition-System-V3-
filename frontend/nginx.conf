# HTTP server block to redirect to HTTPS
server {
    listen 80;
    server_name emotionwave.hon2838.name.my;

    # Location for Let's Encrypt ACME challenge
    # Make sure this path is accessible by Certbot
    location /.well-known/acme-challenge/ {
        root /var/www/certbot; # Or another path you configure for Certbot
    }

    location / {
        return 301 https://$host$request_uri;
    }
}

# HTTPS server block
server {
    listen 443 ssl http2;
    server_name emotionwave.hon2838.name.my;

    # SSL Certificate paths (replace with your actual paths from Let's Encrypt)
    ssl_certificate /etc/letsencrypt/live/emotionwave.hon2838.name.my/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/emotionwave.hon2838.name.my/privkey.pem;
    
    # This allows Nginx to start even if certificates don't exist yet
    ssl_certificate_key /etc/nginx/conf.d/dummy.key;
    ssl_certificate /etc/nginx/conf.d/dummy.crt;

    # Recommended SSL settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;

    # Diffie-Hellman parameters (generate this file, e.g., with openssl dhparam)
    # ssl_dhparam /etc/letsencrypt/dhparams/dhparam.pem; # Optional but recommended

    # HSTS (HTTP Strict Transport Security) - uncomment after testing
    # add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

    # OCSP Stapling - uncomment after testing
    # ssl_stapling on;
    # ssl_stapling_verify on;
    # ssl_trusted_certificate /etc/letsencrypt/live/emotionwave.hon2838.name.my/chain.pem;
    # resolver 8.8.8.8 8.8.4.4 valid=300s; # Google's public DNS, or your preferred resolver
    # resolver_timeout 5s;

    root /usr/share/nginx/html;
    index index.html index.htm;

    location / {
        try_files $uri $uri/ /index.html;
    }

    location /api {
        proxy_pass http://backend:8000; # Forward API requests to the backend service
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme; # Should be 'https'
    }

    # Optional: Add cache control headers for static assets
    location ~* \\.(?:ico|css|js|gif|jpe?g|png)$ {
        expires 1M;
        add_header Cache-Control "public";
    }
}